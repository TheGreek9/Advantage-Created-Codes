Option Explicit
Function DeleteInsert(templateWs As Variant)
    Dim rangeArr() As Variant
    Dim rowLast, k As Long
    Dim rowFirst As Integer
    
    With templateWs
        'Delete columns Employee ID and Employee Name and insert columns for Average Weeks and Gold 25
        rowLast = .Range("A" & .Rows.count).End(xlUp).Row
        rowFirst = .Range("A1").End(xlDown).Row + 1
        If rowLast = (rowFirst - 1) Then
            MsgBox "Please add data to " & templateWs.Name & " tab", vbExclamation
            End
        End If
        If .Range("AS7").Value = "EmployeeId" Then
            .Range("AS:AT").Delete
        End If
        If .Range("H7").Value <> "Average Weeks" And .Range("I7").Value <> "Gold 25" Then
            .Range("H:I").Insert
        End If
    
        'Average Weeks: Extract Cut in Dates, calculate average week based on that time, insert result into Average Weeks column
        If .Range("G7").Value = "Cut In Date" Then
            .Range("H7").Value = "Average Weeks"
            rangeArr = .Range("G" & rowFirst & ":G" & rowLast).Value
            For k = 1 To rowLast - (rowFirst - 1)
                If rangeArr(k, 1) = "" Then
                    rangeArr(k, 1) = ""
                ElseIf IsEmpty(rangeArr(k, 1)) = False Then
                    rangeArr(k, 1) = Round((DateDiff("d", rangeArr(k, 1), Date) / 7), 1)
                Else
                     MsgBox "ERROR: Average weeks array of DeleteInsert Function;" _
                     & vbNewLine & "Please contact Spyro", vbExclamation
                     End
                End If
            Next k
            .Range("H" & rowFirst & ":H" & rowLast).Value = rangeArr
        Else
            MsgBox "No Cut in Date Column on " & templateWs.Name & " tab. Please Fix"
        End If
        
        'Gold 25: Extract item numbers, preform VLookup, insert result into "Gold 25" column
        .Range("I7").Value = "Gold 25"
        rangeArr = .Range("C" & rowFirst & ":C" & rowLast).Value
        For k = 1 To rowLast - (rowFirst - 1)
            On Error Resume Next
            rangeArr(k, 1) = WorksheetFunction.VLookup(rangeArr(k, 1), Application.Workbooks("Smithfield Fresh Scorecard Template.xlsm").Worksheets("Top 25").Range("C4:F40"), 2, False)
            If Err.Number = 1004 Then
                rangeArr(k, 1) = "No"
            ElseIf Err.Number = 0 Then
                rangeArr(k, 1) = "Yes"
            Else
                MsgBox "ERROR: Gold 25 array of DeleteInsert Function;" _
                     & vbNewLine & "Please contact Spyro", vbExclamation
                     End
            End If
        Next k
        .Range("I" & rowFirst & ":I" & rowLast).Value = rangeArr
    End With
End Function
Function funcUGDByStore(templateWs As Variant)
    Dim Workbook As Workbook
    Dim rowLast, colLast, rowUGPNW, rowUGAG, rowGrandTotal, i As Long
    Dim count As Integer
    count = 0
    
    'Find open workbook with "Chain By Store" data, and notify user if none available
    For Each Workbook In Application.Workbooks
            If Right(Workbook.Worksheets(1).Range("A1").End(xlDown).Value, 14) = "Chain by Store" Then
                count = 0
                Exit For
            Else
                count = count + 1
            End If
    Next
    If count >= 1 Then
        MsgBox "Please open Data By Store file", vbExclamation
        End
    End If
    
    With Workbook.Worksheets(1)
        rowLast = .Range("A" & Rows.count).End(xlUp).Row - 4
        colLast = .Cells(rowLast, Columns.count).End(xlToLeft).Column
        
        For i = rowLast To 1 Step -1
            If IsEmpty(.Cells(i, 5)) And IsEmpty(.Cells(i, 6)) Then
                .Cells(i, 1).EntireRow.Delete
            End If
        Next
        
        rowGrandTotal = .Range("A:A").Find("Grand Total").Row
        rowUGPNW = .Range("A:A").Find("UG PNW").Row
        
        .Range(.Cells(rowGrandTotal + 1, 1), .Cells(rowUGPNW - 1, 1)).EntireRow.Delete

        'Recalculate respective columns for UG PNW and UG PNW (AG)
        rowLast = .Range("A" & Rows.count).End(xlUp).Row - 4
        colLast = .Cells(rowLast, Columns.count).End(xlToLeft).Column
        If .Range("H1").Value = "Dist #" Then
            For i = 2 To rowLast
                .Cells(i, 8).Value = .Cells(i, 10).Value + .Cells(i, 12).Value + .Cells(i, 14).Value + .Cells(i, 18).Value
            Next
        End If
        If .Range("I1").Value = "Dist %" Then
            For i = 2 To rowLast
                .Cells(i, 9).Value = .Cells(i, 8).Value / .Cells(i, 5).Value
            Next
        End If
        If .Range("G1").Value = "% Rptd" Then
            For i = 2 To rowLast
                .Cells(i, 7).Value = .Cells(i, 6).Value / .Cells(i, 5).Value
            Next
        End If

        'Recalculate totals for UG PNW and UG PNW (AG) in respective columns
        rowUGAG = .Range("A2:A200").Find("UG PNW(AG)", LookIn:=xlValues).Row
        If .Range("E1").Value = "Total Poss POD" Then
            .Cells(3, 5).Value = 0
            .Cells(rowUGAG, 5) = 0
            For i = 4 To rowUGAG
                .Cells(3, 5).Value = .Cells(3, 5).Value + .Cells(i, 5).Value
            Next
            For i = rowUGAG To rowLast
                .Cells(rowUGAG, 5).Value = .Cells(rowUGAG, 5).Value + .Cells(i, 5).Value
            Next
        End If
        If .Range("F1").Value = "Rptd POD" Then
            .Cells(3, 6).Value = 0
            .Cells(rowUGAG, 6) = 0
            For i = 4 To rowUGAG
                .Cells(3, 6).Value = .Cells(3, 6).Value + .Cells(i, 6).Value
            Next
            For i = rowUGAG To rowLast
                .Cells(rowUGAG, 6).Value = .Cells(rowUGAG, 6).Value + .Cells(i, 6).Value
            Next
        End If
        If .Range("P1").Value = "NA #" Then
            .Cells(3, 16).Value = 0
            .Cells(rowUGAG, 16) = 0
            For i = 4 To rowUGAG
                .Cells(3, 16).Value = .Cells(3, 16).Value + .Cells(i, 16).Value
            Next
            For i = rowUGAG To rowLast
                .Cells(rowUGAG, 16).Value = .Cells(rowUGAG, 16).Value + .Cells(i, 16).Value
            Next
        End If
        If .Range("Q1").Value = "Void #" Then
            .Cells(3, 17).Value = 0
            .Cells(rowUGAG, 17) = 0
            For i = 4 To rowUGAG
                .Cells(3, 17).Value = .Cells(3, 17).Value + .Cells(i, 17).Value
            Next
            For i = rowUGAG To rowLast
                .Cells(rowUGAG, 17).Value = .Cells(rowUGAG, 17).Value + .Cells(i, 17).Value
            Next
        End If
        
        'Clean up the data a bit
        .Range("B:D, J:O, R:U").Delete
        .Range("D1:D" & rowLast).NumberFormat = "0%"
        .Range("F1:F" & rowLast).NumberFormat = "0%"
        
        'Copy newly modified data into "Data by Store" tab on Smithfield file
        .Range("A1:D" & rowLast).Copy
        templateWs.Range("A7").PasteSpecial xlPasteValuesAndNumberFormats
        .Range("E1:H" & rowLast).Copy
    End With
End Function
Function funcUGDByItem(Workbook As Variant)
    Dim rowLast, colLast, rowUGAG, i As Long
    
    With Workbook.Worksheets(1)
        .Range("A1:A5, A8").EntireRow.Delete
        .Range("B:D").Columns.Delete
        rowLast = .Range("A" & Rows.count).End(xlUp).Row - 4
        colLast = .Cells(rowLast, Columns.count).End(xlToLeft).Column
        
        'Recalculate Dist # and add it to cell
        If .Range("E1").Value = "Dist #" Then
            For i = 2 To rowLast
                .Cells(i, 5).Value = .Cells(i, 7).Value + .Cells(i, 9).Value + .Cells(i, 11).Value + .Cells(i, 15).Value
            Next
        End If
        
        'Clean data, and sort Dist # from largest to smallest
        .Range("C:D, F:R").Delete
        .Range("A:C").Sort key1:=.Range("C2"), order1:=xlDescending, Header:=xlYes
        .Range("A1:C" & rowLast).Copy
    End With
End Function
